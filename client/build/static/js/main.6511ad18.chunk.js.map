{"version":3,"sources":["components/formlist/formlist.js","components/list/list.js","components/formstory/formstory.js","components/story/story.js","components/content/content.js","components/toggle/toggle.js","App.js","serviceWorker.js","index.js"],"names":["Formlist","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isPulsing","button","_this2","props","isSpeak","react_default","a","createElement","type","id","className","onClick","e","setState","triggerAudioRecording","onSubmit","submitHandlerList","name","placeholder","value","inputText","onChange","changeHandler","React","Component","List","tasks","list","map","todo","index","key","task","removeHandlerList","reverse","Fragment","Formstory","submitHandlerStory","rows","Story","stories","story","words","removeHandlerStory","Content","heading","form","contentList","isStory","components_story_story","formstory_formstory","list_list","formlist_formlist","display","Toggle","data-toggle","onStoryChanged","autoComplete","onSpeakChanged","App","deletedList","deletedStory","isRecordingStarted","audioContext","myStream","scriptProcessor","audioSocket","bind","assertThisInitialized","startRecording","streamAudioData","stopAudioRecording","initAndStartAudioRecording","setupAudioSocket","Promise","all","fetch","then","_ref","_ref2","slicedToArray","res1","res2","json","_ref3","_ref4","getTracks","stop","removeEventListener","close","window","AudioContext","webkitAudioContext","navigator","mediaDevices","getUserMedia","audio","mandatory","googEchoCancellation","googAutoGainControl","googNoiseSuppression","googHighpassFilter","catch","console","log","stream","callback","latencyHint","inputPoint","createGain","context","createScriptProcessor","microphone","createMediaStreamSource","analyser","createAnalyser","connect","destination","addEventListener","floatSamples","inputBuffer","getChannelData","readyState","OPEN","send","downsampleBuffer","buffer","sampleRate","outSampleRate","code","message","sampleRateRatio","newLength","Math","round","length","result","Int16Array","offsetResult","offsetBuffer","nextOffsetBuffer","accum","count","i","min","_this3","aWS","WebSocket","onerror","err","onopen","onclose","onmessage","data","substr","slice","event","target","newList","inputTask","preventDefault","push","method","body","JSON","stringify","headers","Accept","Content-Type","res","response","error","newStory","inputWords","newDeletedList","splice","concat","newDeletedStory","_this4","src","width","height","alt","toggle","content_content","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6511ad18.chunk.js","sourcesContent":["import React from 'react';\nimport './formlist.css';\n\nclass Formlist extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            isPulsing: false,\n        };\n    };\n\n    render() {\n        let button;\n        if (this.props.isSpeak) {\n            button = <button type=\"submit\" id=\"speech\" className=\"btn\"\n                    onClick={ (e) => {\n                        this.setState({isPulsing: !this.state.isPulsing});\n                        this.props.triggerAudioRecording();\n                    }}>\n                        <div className={this.state.isPulsing ? \"pulse-ring\" : \"\"}></div>\n                        <i className=\"fa fa-microphone\"></i>\n                    </button>;\n        } else {\n            button = <button type=\"submit\" className=\"btn btn-info\">Add Item</button>;\n        }\n        return (\n            <form onSubmit={(e) => {this.props.submitHandlerList(e)}}>\n                    <label>\n                        <input className=\"form-control form-rounded\" type=\"text\" name=\"task\" placeholder=\"...order pizza\"\n                        value={this.props.inputText}\n                        onChange={this.props.changeHandler}\n                        />\n                    </label>\n                    <div>{button}</div>\n                </form>\n        );\n    };\n}\n\nexport default Formlist;","import React from 'react';\nimport './list.css';\n\nclass List extends React.Component {\n\n    render() {\n        // console.log(\"list propssss:\",this.props.list);\n        let tasks = this.props.list.map((todo, index) => {\n\n            return  <div key={index} className=\"row list align-items-center\">\n                        <div className=\"col-md-6 col-6\">\n                            {todo.task}\n                        </div>\n                        <div className=\"col-md-6 col-6 remove align-middle\">\n                            <button value={index}\n                                className=\"btn btn-outline-danger btn-sm\"\n                                onClick={(e) => {this.props.removeHandlerList(e, todo.id)\n                            }}>Remove\n                            </button>\n                        </div>\n                    </div>\n        }).reverse();\n\n        return (\n            <React.Fragment>\n                {tasks}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default List;","import React from 'react';\nimport './formstory.scss';\n\nclass Formstory extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            isPulsing: false,\n        };\n    };\n\n    render() {\n        let button;\n        if (this.props.isSpeak) {\n            button = <button type=\"submit\" id=\"speech\" className=\"btn\"\n                    onClick={ (e) => {\n                        this.setState({isPulsing: !this.state.isPulsing});\n                        this.props.triggerAudioRecording();\n                    }} >\n                        <div className={this.state.isPulsing ? \"pulse-ring\" : \"\"}></div>\n                        <i className=\"fa fa-microphone\"></i>\n                      </button>;\n        } else {\n            button = <button type=\"submit\" className=\"btn btn-info\">Add Story</button>\n        }\n\n        return (\n            <span>\n                <form onSubmit={(e) => {this.props.submitHandlerStory(e)}}>\n                    <label>\n                        <textarea className=\"form-control form-rounded\" name=\"words\" placeholder=\"...once upon a time\" rows=\"4\"\n                        value={this.props.inputText}\n                        onChange={this.props.changeHandler}\n                        >\n                        </textarea>\n                    </label>\n                    <div>{button}</div>\n                </form>\n          </span>\n        );\n    }\n}\n\nexport default Formstory;","import React from 'react';\nimport './story.css';\n\nclass Story extends React.Component {\n\n    render() {\n        // console.log(\"story propssss:\",this.props.story);\n        let stories = this.props.story.map((story, index) => {\n\n            return  <div key={index} className=\"row story align-items-center\">\n                        <div className=\"col-md-8 col-8\">\n                            {story.words}\n                        </div>\n                        <div className=\"col-md-4 col-4 remove\">\n                            <button value={index}\n                                    className=\"btn btn-outline-danger btn-sm\"\n                                    onClick={(e) => {this.props.removeHandlerStory(e, story.id)\n                                }}>Remove\n                            </button>\n                        </div>\n                    </div>\n        }).reverse();\n\n        return (\n            <React.Fragment>\n                {stories}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Story;","import React from 'react';\nimport './content.css';\n\nimport Formlist from '../formlist/formlist';\nimport List from '../list/list';\nimport Formstory from '../formstory/formstory';\nimport Story from '../story/story';\n\nclass Content extends React.Component {\n\n    render() {\n      let heading;\n      let form;\n      let contentList;\n      if (this.props.isStory) {\n        heading = \"Story\";\n        contentList = <Story\n                story={this.props.story}\n                removeHandlerStory={this.props.removeHandlerStory}\n              />;\n        form = <Formstory\n                submitHandlerStory={(e) => {this.props.submitHandlerStory(e)}}\n                changeHandler={(e) => {this.props.changeHandler(e)}}\n                inputText = {this.props.inputText}\n                isSpeak = {this.props.isSpeak}\n                triggerAudioRecording={this.props.triggerAudioRecording}\n                />;\n      } else {\n        heading = \"List\";\n        contentList = <List\n                  list={this.props.list}\n                  removeHandlerList={this.props.removeHandlerList}\n                />;\n        form = <Formlist\n                submitHandlerList={(e) => {this.props.submitHandlerList(e)}}\n                changeHandler={(e) => {this.props.changeHandler(e)}}\n                inputText={this.props.inputText}\n                isSpeak = {this.props.isSpeak}\n                triggerAudioRecording={this.props.triggerAudioRecording}\n                />;\n      }\n\n        return (\n            <React.Fragment>\n                    <div className=\"row\">\n                        <div className=\"col-md-7\">\n                            <div className=\"title text-center\">{heading}</div>\n                        </div>\n                        <div className=\"col-md-1\"></div>\n                        <div className=\"col-md-4\"></div>\n                    </div>\n\n                    <div className=\"row outerwhole\" display=\"flex\">\n\n                        <div className=\"col-md-7 wholecontent\">\n                            { contentList }\n                        </div>\n                        <div className=\"col-md-1\"></div>\n                        <div className=\"col-md-4 text-center\">\n                            { form }\n                        </div>\n                    </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Content;","import React from 'react';\n\nclass Toggle extends React.Component {\n\n    render() {\n        return (\n            <React.Fragment>\n                    <div className=\"row\">\n                        <div className=\"col-md-8\"></div>\n                        <div className=\"col-md-4 flex-container\">\n\n                            <div className=\"togcapsule1 btn-group btn-group-toggle\" data-toggle=\"buttons\">\n                              <label className={\"btn btn-outline-light btn \" + (this.props.isStory ? 'active' : '')} onClick={() => this.props.onStoryChanged(\"story\")}>\n                                <input type=\"radio\" name=\"options\" id=\"optionStory\" autoComplete=\"off\" /> Story\n                              </label>\n                              <label className={\"btn btn-outline-light btn \" + (!this.props.isStory ? 'active' : '')} onClick={() => this.props.onStoryChanged(\"list\")}>\n                                <input type=\"radio\" name=\"options\" id=\"optionList\" autoComplete=\"off\" /> List\n                              </label>\n                            </div>\n\n                            <div className=\"togcapsule2 btn-group btn-group-toggle\" data-toggle=\"buttons\">\n                              <label className={\"btn btn-outline-light btn \" + (this.props.isSpeak? 'active': '')} onClick={() => this.props.onSpeakChanged(\"speak\")}>\n                                <input type=\"radio\" name=\"options\" id=\"optionSpeak\" autoComplete=\"off\"/> Speak\n                              </label>\n                              <label className={\"btn btn-outline-light btn \" + (!this.props.isSpeak? 'active': '')} onClick={() => this.props.onSpeakChanged(\"type\")}>\n                                <input type=\"radio\" name=\"options\" id=\"optionType\" autoComplete=\"off\"/> Type\n                              </label>\n                            </div>\n\n                        </div>\n                    </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Toggle;","import React, { Component } from 'react';\nimport './App.css';\n\nimport Content from './components/content/content';\nimport Toggle from './components/toggle/toggle';\n\nclass App extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            list: [],\n            deletedList: [],\n            inputText: \"\",\n            story: [],\n            deletedStory: [],\n            isStory: true,\n            isSpeak: true,\n            isRecordingStarted: false,\n            audioContext: null,\n            myStream: null,\n            scriptProcessor: null,\n            audioSocket: null,\n        };\n        this.submitHandlerList = this.submitHandlerList.bind(this);\n        this.removeHandlerList = this.removeHandlerList.bind(this);\n        this.changeHandler = this.changeHandler.bind(this);\n        this.submitHandlerStory = this.submitHandlerStory.bind(this);\n        this.removeHandlerStory = this.removeHandlerStory.bind(this);\n        this.onStoryChanged = this.onStoryChanged.bind(this);\n        this.onSpeakChanged = this.onSpeakChanged.bind(this);\n\n        this.triggerAudioRecording = this.triggerAudioRecording.bind(this);\n        this.startRecording = this.startRecording.bind(this);\n        this.streamAudioData = this.streamAudioData.bind(this);\n        this.stopAudioRecording = this.stopAudioRecording.bind(this);\n        this.initAndStartAudioRecording = this.initAndStartAudioRecording.bind(this);\n        this.setupAudioSocket = this.setupAudioSocket.bind(this);\n    }\n\n    componentDidMount() {\n        Promise.all([fetch('/todos'), fetch('/story')])\n\n            .then(([res1, res2]) => {\n                return Promise.all([res1.json(), res2.json()])\n            })\n            .then(([res1, res2]) => {\n                this.setState({ list: res1 })\n                this.setState({ story: res2 })\n            });\n    }\n\n    triggerAudioRecording() {\n        if (this.state.isRecordingStarted) {\n            this.stopAudioRecording();\n            this.setState({ isRecordingStarted: !this.state.isRecordingStarted });\n        } else {\n            this.initAndStartAudioRecording();\n            this.setState({ isRecordingStarted: !this.state.isRecordingStarted });\n        }\n    }\n\n    stopAudioRecording() {\n        if (this.state.myStream) {\n            this.state.myStream.getTracks()[0].stop();\n            this.setState({ myStream: null });\n        }\n        if (this.state.scriptProcessor) {\n            this.state.scriptProcessor.removeEventListener('audioprocess', this.streamAudioData);\n        }\n        if (this.state.audioSocket) {\n            this.state.audioSocket.close();\n            this.setState({ audioSocket: null });\n        }\n    }\n\n    initAndStartAudioRecording() {\n        window.AudioContext = window.AudioContext || window.webkitAudioContext;\n        navigator.mediaDevices.getUserMedia({\n                audio: {\n                    mandatory: {\n                        googEchoCancellation: 'false',\n                        googAutoGainControl: 'false',\n                        googNoiseSuppression: 'false',\n                        googHighpassFilter: 'false',\n                    },\n                },\n            }).then(this.startRecording)\n            .catch(e => {\n                /* If there are some errors with parameter configurations or\n    user didn’t give you the access to the microphone inside the browser, you end here. */\n                console.log(e);\n            });\n    }\n\n    startRecording(stream, callback) {\n        let AudioContext = window.AudioContext || window.webkitAudioContext;\n        this.setState({\n            audioContext: this.state.audioContext || new AudioContext({ latencyHint: 'interactive' }),\n        })\n        if (!this.state.audioContext) {\n            return;\n        }\n\n        // AudioNode used to control the overall gain (or volume) of the audio graph\n        const inputPoint = this.state.audioContext.createGain();\n        this.setState({\n            myStream: stream,\n            scriptProcessor: inputPoint.context.createScriptProcessor(2048, 1, 1)\n        });\n        const microphone = this.state.audioContext.createMediaStreamSource(this.state.myStream);\n        const analyser = this.state.audioContext.createAnalyser();\n\n        microphone.connect(inputPoint);\n        inputPoint.connect(analyser);\n        inputPoint.connect(this.state.scriptProcessor);\n        this.state.scriptProcessor.connect(inputPoint.context.destination);\n        // This is for registering to the “data” event of audio stream, without overwriting the default scriptProcessor.onAudioProcess function if there is one.\n        this.state.scriptProcessor.addEventListener('audioprocess', this.streamAudioData);\n    }\n\n    // Function that streams the data to our nodejs backend.\n    streamAudioData(e) {\n        if (!this.state.audioSocket) {\n            this.setupAudioSocket();\n        }\n        const floatSamples = e.inputBuffer.getChannelData(0);\n        if (this.state.audioSocket.readyState === this.state.audioSocket.OPEN) {\n            this.state.audioSocket.send(this.downsampleBuffer(floatSamples, 44100, 16000));\n        }\n    };\n\n    downsampleBuffer(buffer, sampleRate, outSampleRate) {\n        if (outSampleRate === sampleRate) {\n            return buffer;\n        } else if (outSampleRate > sampleRate) {\n            let errorMessage = { code: 418, message: \"downsampling rate show be smaller than original sample rate\" };\n            throw errorMessage;\n            // throw \"downsampling rate show be smaller than original sample rate\";\n        }\n        let sampleRateRatio = sampleRate / outSampleRate;\n        let newLength = Math.round(buffer.length / sampleRateRatio);\n        let result = new Int16Array(newLength);\n        let offsetResult = 0;\n        let offsetBuffer = 0;\n        while (offsetResult < result.length) {\n            let nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\n            let accum = 0,\n                count = 0;\n            for (let i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {\n                accum += buffer[i];\n                count++;\n            }\n\n            result[offsetResult] = Math.min(1, accum / count) * 0x7FFF;\n            offsetResult++;\n            offsetBuffer = nextOffsetBuffer;\n        }\n        return result.buffer;\n    }\n\n\n    setupAudioSocket() {\n        if (!this.state.audioSocket) {\n            let aWS = new WebSocket('ws://localhost:3002');\n            aWS.onerror = (err) => { console.log('audioSocket error', err) };\n            aWS.onopen = () => { console.log('audioSocket open') }\n            aWS.onclose = () => { console.log('audioSocket closed') }\n            aWS.onmessage = (data) => {\n                // let spoken = data.data.substr(1).slice(0, -1);\n                // if (spoken == \"delete everything\") {\n                //     this.setState({ story: [] })\n                // }\n                this.setState({ inputText: this.state.inputText + data.data.substr(1).slice(0, -1) });\n            }\n            this.setState({ audioSocket: aWS });\n        }\n    }\n\n    changeHandler(event) {\n        this.setState({ inputText: event.target.value });\n    }\n\n    submitHandlerList(event) {\n        let newList = this.state.list;\n        let inputTask = event.target.task.value;\n        event.preventDefault();\n\n        if (inputTask.length > 1) {\n            newList.push({\n                task: inputTask,\n            });\n\n            this.setState({\n                list: newList,\n                inputText: \"\"\n            })\n\n            let url = \"/todos\";\n            let data = { task: inputTask };\n            fetch(url, {\n                    method: \"POST\",\n                    body: JSON.stringify(data),\n                    headers: {\n                        'Accept': 'application/json',\n                        'Content-Type': 'application/json'\n                    }\n                }).then(res => res.json())\n                .then(response => console.log('Success:', JSON.stringify(response)))\n                .catch(error => console.error('Error:', error));\n\n        } else {\n            // alert(\"Error: 'Item' must be more than 1 character!\");\n            this.setState({ inputText: \"\" })\n        }\n    }\n\n\n    submitHandlerStory(event) {\n        let newStory = this.state.story;\n        let inputWords = event.target.words.value;\n        event.preventDefault();\n\n        if (inputWords.length > 1) {\n            newStory.push({\n                words: inputWords,\n            });\n\n            this.setState({\n                story: newStory,\n                inputText: \"\"\n            })\n\n            let url = \"/story\";\n            let data = { words: inputWords };\n\n            fetch(url, {\n                    method: \"POST\",\n                    body: JSON.stringify(data),\n                    headers: {\n                        'Accept': 'application/json',\n                        'Content-Type': 'application/json'\n                    }\n                }).then(res => res.json())\n                .then(response => console.log('Success:', JSON.stringify(response)))\n                .catch(error => console.error('Error:', error));\n\n        } else {\n            // alert(\"Error: 'Story' must be more than 1 character!\");\n            this.setState({ inputText: \"\" })\n        }\n    }\n\n    removeHandlerList(event, id) {\n\n        let index = event.target.value\n        let newList = this.state.list\n        let newDeletedList = this.state.deletedList\n\n        //add deleted item to delete list\n        newDeletedList.push(newList[index])\n\n        //remove item from to-do list\n        newList.splice(index, 1)\n        this.setState({\n            list: newList,\n            deletedList: newDeletedList\n        });\n\n        fetch(`/todos/${id}/delete`, {\n                method: \"DELETE\",\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ id: id })\n            })\n            .then(res => res.json())\n            .then(res => console.log(res))\n    }\n\n    removeHandlerStory(event, id) {\n\n        let index = event.target.value\n        let newStory = this.state.story\n        let newDeletedStory = this.state.deletedStory\n\n        //add deleted item to delete list\n        newDeletedStory.push(newStory[index])\n\n        //remove item from story\n        newStory.splice(index, 1)\n        this.setState({\n            story: newStory,\n            deletedStory: newDeletedStory\n        });\n\n        fetch(`/story/${id}/delete`, {\n                method: \"DELETE\",\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ id: id })\n            })\n            .then(res => res.json())\n            .then(res => console.log(res))\n    }\n\n    onStoryChanged(isStory) {\n        this.setState({\n            isStory: (isStory === \"story\")\n        });\n    }\n\n    onSpeakChanged(isSpeak) {\n        this.setState({\n            isSpeak: (isSpeak === \"speak\")\n        });\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n\n                <div className=\"heading text-center\">\n                    <img src=\"/images/logo.png\" width=\"140\" height=\"150\" alt=\"logo\"/>\n                </div>\n\n\n                <div className=\"container mainbox\">\n\n                    <Toggle\n                        isStory={this.state.isStory}\n                        isSpeak={this.state.isSpeak}\n                        onStoryChanged={this.onStoryChanged}\n                        onSpeakChanged={this.onSpeakChanged}\n                    />\n                    <Content\n                        isStory={this.state.isStory}\n                        isSpeak={this.state.isSpeak}\n                        list={this.state.list}\n                        removeHandlerList={this.removeHandlerList}\n                        submitHandlerList={(e) => {this.submitHandlerList(e)}}\n                        changeHandler={(e) => {this.changeHandler(e)}}\n                        inputText={this.state.inputText}\n                        story={this.state.story}\n                        removeHandlerStory={this.removeHandlerStory}\n                        submitHandlerStory={(e) => {this.submitHandlerStory(e)}}\n                        triggerAudioRecording={this.triggerAudioRecording}\n                    />\n                </div>\n                <div className=\"footer\">\n                    <div className=\"copyright\">Copyright © 2019 Claucanchin, Inc. All rights reserved.</div>\n                        <p>Terms of Use | Privacy Policy</p>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}